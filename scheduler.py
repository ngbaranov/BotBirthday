
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from sqlalchemy import select, extract

from keyboards.reply import main_kb
from models import Birthday
from datetime import datetime
from zoneinfo import ZoneInfo

import random


from utils.open_json import birthday_open_json



def setup_scheduler(scheduler: AsyncIOScheduler, bot, get_db):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π."""
    @scheduler.scheduled_job("cron", minute="*")
    async def birthday_check():
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Å–µ–≥–æ–¥–Ω—è –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
        now_moscow = datetime.now(ZoneInfo("Europe/Moscow"))
        if now_moscow.hour == 8 and now_moscow.minute == 15:
            today = now_moscow.date()


            async with get_db() as session:
                """–ü–æ–∏—Å–∫ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤: –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è SQL-–∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π,
                 –≥–¥–µ –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π"""
                result = await session.execute(
                    select(Birthday).where(
                        extract("day", Birthday.birth_date) == today.day,
                        extract("month", Birthday.birth_date) == today.month
                    )
                )
                birthdays = result.scalars().all()
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∏,
                # –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –∏ —Ç–µ–∫—Å—Ç–∞–º–∏ –∏–∑ JSON-—Ñ–∞–π–ª–∞
                notified_users = set()
                for b in birthdays:
                    if b.user_id not in notified_users:
                        notified_users.add(b.user_id)
                        await bot.send_message(
                            b.user_id,
                            "üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É:\n" +
                            "\n".join(f"‚Ä¢ {x.full_name}" for x in birthdays if x.user_id == b.user_id) +
                            "\n\n" +
                            "–¢–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π:"
                            "\n\n".join(random.sample(birthday_open_json(), 3)) +
                            "\n\n" +
                            "–ï—Å–ª–∏ —Ç–µ–∫—Å—Ç—ã –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üëá",
                            reply_markup=main_kb()
                        )
