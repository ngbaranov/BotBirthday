from aiogram import Router, F
from aiogram.types import Message
from utils.state import waiting_for_birthday
from keyboards.reply import cancel_kb, main_kb
from db.db_depends import get_db
from models import Birthday
from datetime import datetime
from sqlalchemy import insert

add_router = Router()

@add_router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –î–†")
async def start_adding_birthday(message: Message):
    waiting_for_birthday.add(message.from_user.id)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ 1990-05-12)–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª",
        reply_markup=cancel_kb()
    )

@add_router.message()
async def handle_birthday_input(message: Message):
    user_id = message.from_user.id
    if user_id not in waiting_for_birthday:
        return

    if message.text.lower() in ("–≥–æ—Ç–æ–≤–æ", "/done"):
        waiting_for_birthday.discard(user_id)
        await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è üëå", reply_markup=main_kb())
        return

    try:
        *name_parts, date_str = message.text.strip().split()
        full_name = " ".join(name_parts)
        birth_date = datetime.strptime(date_str, "%Y-%m-%d").date()

        async for session in get_db():
            await session.execute(
                insert(Birthday).values(
                    user_id=user_id,
                    full_name=full_name,
                    birth_date=birth_date
                )
            )
            await session.commit()

        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {full_name} ‚Äî {birth_date}")

    except Exception:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ 1990-05-12")