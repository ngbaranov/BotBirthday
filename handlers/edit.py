from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, update
from models import Birthday
from sqlalchemy.ext.asyncio import AsyncSession
from utils.state import EditBirthday
from datetime import datetime

edit_router = Router()

@edit_router.message(F.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –î–†")
async def choose_birthday_to_edit(message: types.Message, session: AsyncSession):
    result = await session.execute(
        select(Birthday).where(Birthday.user_id == message.from_user.id)
    )
    birthdays = result.scalars().all()

    if not birthdays:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(
            text=f"{b.full_name} ‚Äî {b.birth_date.strftime('%d.%m.%Y')}",
            callback_data=f"edit:{b.id}"
        )] for b in birthdays
    ])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=keyboard)

@edit_router.callback_query(lambda c: c.data and c.data.startswith("edit:"))
async def ask_field_to_edit(callback: types.CallbackQuery, state: FSMContext):
    print("‚û°Ô∏è edit: –≤—ã–±—Ä–∞–Ω –∏–º–µ–Ω–∏–Ω–Ω–∏–∫")
    birthday_id = int(callback.data.split(":")[1])
    await state.update_data(birthday_id=birthday_id)

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üìù –ò–º—è", callback_data="field:name")],
        [types.InlineKeyboardButton(text="üìÖ –î–∞—Ç–∞", callback_data="field:date")],
        [types.InlineKeyboardButton(text="üîÑ –ò–º—è –∏ –¥–∞—Ç–∞", callback_data="field:all")]
    ])

    await state.set_state(EditBirthday.choosing_field)
    await callback.message.edit_text("–ß—Ç–æ –±—É–¥–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=keyboard)
    await callback.answer()

@edit_router.callback_query(lambda c: c.data and c.data.startswith("field:"), EditBirthday.choosing_field)
async def handle_field_choice(callback: types.CallbackQuery, state: FSMContext):
    print("‚û°Ô∏è field: –≤—ã–±—Ä–∞–Ω —Ç–∏–ø —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    field = callback.data.split(":")[1]

    await callback.message.answer(f"‚û°Ô∏è FSM –ü–ï–†–ï–•–û–î: –≤—ã–±–∏—Ä–∞–µ–º –ø–æ–ª–µ {field}")
    current_state = await state.get_state()
    await callback.message.answer(f"üîç –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM: {current_state}")

    if field == "name":
        await state.set_state(EditBirthday.waiting_for_new_name)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
    elif field == "date":
        await state.set_state(EditBirthday.waiting_for_new_date)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì):")
    else:
        await state.set_state(EditBirthday.waiting_for_all)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∏ –¥–∞—Ç—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ 01.01.2001):")

    await callback.answer()

@edit_router.message(F.text, EditBirthday.waiting_for_new_name)
async def save_new_name(message: types.Message, state: FSMContext, session: AsyncSession):
    print("‚úÖ –ø–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ –∏–º—è")
    data = await state.get_data()
    await session.execute(
        update(Birthday)
        .where(Birthday.id == data["birthday_id"])
        .values(full_name=message.text.strip())
    )
    await session.commit()
    await state.clear()

    await message.answer(f"‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ¬´{message.text.strip()}¬ª")

@edit_router.message(F.text, EditBirthday.waiting_for_new_date)
async def save_new_date(message: types.Message, state: FSMContext, session: AsyncSession):
    try:
        new_date = datetime.strptime(message.text.strip(), "%d.%m.%Y").date()
        data = await state.get_data()

        await session.execute(
            update(Birthday)
            .where(Birthday.id == data["birthday_id"])
            .values(birth_date=new_date)
        )
        await session.commit()
        await state.clear()

        await message.answer(f"‚úÖ –î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_date.strftime('%d.%m.%Y')}")

    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")

@edit_router.message(F.text, EditBirthday.waiting_for_all)
async def save_new_name_and_date(message: types.Message, state: FSMContext, session: AsyncSession):
    try:
        *name_parts, date_str = message.text.strip().rsplit(" ", 1)
        new_name = " ".join(name_parts)
        new_date = datetime.strptime(date_str, "%d.%m.%Y").date()
        data = await state.get_data()

        await session.execute(
            update(Birthday)
            .where(Birthday.id == data["birthday_id"])
            .values(full_name=new_name, birth_date=new_date)
        )
        await session.commit()
        await state.clear()

        await message.answer(f"‚úÖ –ò–º—è –∏ –¥–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–∞ ¬´{new_name} ‚Äî {new_date.strftime('%d.%m.%Y')}¬ª")

    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ 01.01.2001")