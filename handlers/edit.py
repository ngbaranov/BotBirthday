from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession


from utils.state import EditBirthday
from utils.edit_fields import save_single_field
from keyboards.inline import edit_selection_kb, choose_field_kb
from dao.dao import BirthdayDAO

edit_router = Router()


@edit_router.message(F.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –î–†")
async def choose_birthday_to_edit(message: types.Message, session: AsyncSession):

    birthdays = await BirthdayDAO(session).get_sorted_by_user_id(message.from_user.id)

    if not birthdays:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=edit_selection_kb(birthdays))


@edit_router.callback_query(lambda c: c.data and c.data.startswith("edit:"))
async def ask_field_to_edit(callback: types.CallbackQuery, state: FSMContext):
    print("‚û°Ô∏è edit: –≤—ã–±—Ä–∞–Ω –∏–º–µ–Ω–∏–Ω–Ω–∏–∫")
    birthday_id = int(callback.data.split(":")[1])
    await state.update_data(birthday_id=birthday_id)
    await state.set_state(EditBirthday.choosing_field)
    await callback.message.edit_text("–ß—Ç–æ –±—É–¥–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=choose_field_kb())
    await callback.answer()


@edit_router.callback_query(lambda c: c.data and c.data.startswith("field:"), EditBirthday.choosing_field)
async def handle_field_choice(callback: types.CallbackQuery, state: FSMContext):
    print("‚û°Ô∏è field: –≤—ã–±—Ä–∞–Ω —Ç–∏–ø —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    field = callback.data.split(":")[1]

    await callback.message.answer(f"‚û°Ô∏è FSM –ü–ï–†–ï–•–û–î: –≤—ã–±–∏—Ä–∞–µ–º –ø–æ–ª–µ {field}")
    current_state = await state.get_state()
    await callback.message.answer(f"üîç –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM: {current_state}")

    if field == "name":
        await state.set_state(EditBirthday.waiting_for_new_name)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
    elif field == "date":
        await state.set_state(EditBirthday.waiting_for_new_date)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì):")
    else:
        await state.set_state(EditBirthday.waiting_for_all)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∏ –¥–∞—Ç—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ 01.01.2001):")

    await callback.answer()

@edit_router.message(F.text, EditBirthday.waiting_for_new_name)
async def handle_name(message, state, session):
    await save_single_field(message, state, session, field="full_name")

@edit_router.message(F.text, EditBirthday.waiting_for_new_date)
async def handle_date(message, state, session):
    await save_single_field(message, state, session, field="birth_date")

@edit_router.message(F.text, EditBirthday.waiting_for_all)
async def handle_both(message, state, session):
    await save_single_field(message, state, session, field="both")
